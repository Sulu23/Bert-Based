import os
import numpy as np
from sklearn.datasets import make_classification
#from sklearn import svm
#from sklearn import svm
from sklearn_svm_classifier import SVMClassifier
from sklearn.model_selection import train_test_split
import pandas as pd
#import csv
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import metrics

def read_preprocess(filename):


    with open(filename, mode='r') as f:
        data = []
        for line in f:
            data.append(line.strip().split('\t'))

    df = pd.DataFrame(data, columns=["word", "label"])

    print(df)

    words = df["word"].to_list()
    labels = df["label"].to_list()

    return words, labels


def evaluate(true_labels, predicted_labels):
    # Use confusion matrix generated by the provided function to calculate evaluation metr>
    confusion_matrix = metrics.confusion_matrix(y_true=true_labels, y_pred=predicted_labels)

    print('***** Evaluation *****')
    print(confusion_matrix)

    report = metrics.classification_report(y_true=true_labels, y_pred=predicted_labels, zero_division=0.0)
    print(report)
    report_dict = metrics.classification_report(y_true=true_labels, y_pred=predicted_labels, zero_division=0.0, output_dict=True)

    f1 = report_dict["macro avg"]["f1-score"]
    return f1



def train_svm(words, labels):

    cls = SVMClassifier(kernel='linear')

    print("*** Extracting Features ***")
    train_feats = cls.get_features(words, ngram=3)

    print("*** Applying TF-IDF ***")

    train_feats = cls.tf_idf(train_feats)

    print("*** Training SVM ***")

    cls.fit(train_feats, labels)


    return cls

def test_svm(words, cls):

    print("*** Extracting Features ***")
    test_feats = cls.get_features(words, test_data=True)

    print("*** Applying TF-IDF ***")

    test_feats = cls.tf_idf(test_feats, test_data=True)


    print("*** Making predictions ***")

    predicted_labels = cls.predict(test_feats)


    return predicted_labels


def main():

    train_data = "tsv_train.conll"
#    train_data = "pain.conll"
    test_data = "tsv_dev.conll"

    # train our model
    train_words, train_labels = read_preprocess(train_data)
    cls = train_svm(train_words, train_labels)

    # test our model
    test_words, test_labels = read_preprocess(test_data)
    predictions = test_svm(test_words, cls)


    f1 = evaluate(test_labels, predictions)
    print(f1)




if __name__ == "__main__":
    main()
